AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  {{ cookiecutter.project_name }}

  Sample SAM Template for {{ cookiecutter.project_name }}


Resources:

  # Does not change.  Always the same no matter what Backend we use - Lambda, AWS serverless, EC2, etc...
  # This is required because once you deploy a stack with a custom resource - the ServiceToken can never change.
  # Because this is an SNS topic that will be a hard coded name, the ARN will never change once deployed.  The
  # lambda function can change or be deleted/recreated but the Topic will be a constant.
  SNSTopic:
    Type: 'AWS::SNS::Topic'
    Properties:
      TopicName: !Sub 'cfr-${AWS::Region}-{{ cookiecutter.project_name }}'


  # SSM Parameter store for the ARN - to be able to call it from another template
  ARNParam:
    Type: "AWS::SSM::Parameter"
    Properties:
      Name: '/hms/tpm/dice/local/cf_resource/{{ cookiecutter.project_name }}/arn'
      Type: "String"
      Value: !Ref SNSTopic
      Description: "SSM Parameter for {{ cookiecutter.project_name }} ARN."


  #Define the function
  #DO NOT modify CodeUri without talking to DICE team and NickC. Lots of design work around this decision
  Function:
    Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
    Properties:
      CodeUri: src/
      Handler: {{ cookiecutter.project_name }}_function/app.lambda_handler
      Role: !GetAtt Role.Arn
      MemorySize:  128
      Timeout: 90
      Runtime: python3.7
      Events:             # Layer of indirection required so we can update the function without updating the ARN the CFT are pointing too...
        SNSEvent:
          Properties:
            Topic: !Ref SNSTopic
          Type: SNS

  #Create log group and control retention
  LogGroup:
    Type: 'AWS::Logs::LogGroup'
    Properties:
      RetentionInDays: 30
      LogGroupName: !Join
        - ''
        - - /aws/lambda/
          - !Ref Function

  #Role for the Function
  Role:
    Type: 'AWS::IAM::Role'
    Properties:
      Path: /
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          -
            Sid: AllowLambdaServiceToAssumeRole
            Effect: Allow
            Action:
              - 'sts:AssumeRole'
            Principal:
              Service:
                - lambda.amazonaws.com
      Policies:
        -
          PolicyName: All_policies
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              -
                Effect: Allow
                Action:
                  - 'logs:CreateLogStream'
                  - 'logs:PutLogEvents'
                Resource:
                  - !Sub "${LogGroup.Arn}"
                  - !Sub "${LogGroup.Arn}:log-stream:*"


              - #For the dynamo DB locking code
                Effect: Allow
                Action:
                  - dynamodb:CreateTable
                  - dynamodb:UpdateTimeToLive
                  - dynamodb:PutItem
                  - dynamodb:DeleteItem
                  - dynamodb:GetItem
                  - dynamodb:UpdateItem
                  - dynamodb:UpdateTable
                  - dynamodb:TagResource
                  - dynamodb:DescribeTable
                  - dynamodb:DescribeTimeToLive
                Resource:
                  - !Sub "arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/HMS_Eliza_CustomResources"

              - #For the common Cross Account code.  Optional only if using the common cross-account code.
                Effect: Allow
                Action:
                  - sts:GetCallerIdentity
                Resource:
                  - '*'
